type token =
  | LET
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | EQ
  | INT of (int)
  | IDENT of (string)
  | TRUE
  | FALSE
  | REC
  | EOF
  | LPAREN
  | RPAREN
  | COMMA
  | RIGHT_ARROW

open Parsing;;
let _ = parse_error;;
# 2 "miniml/parser.mly"
  open Ast
# 25 "miniml/parser.ml"
let yytransl_const = [|
  257 (* LET *);
  258 (* IN *);
  259 (* IF *);
  260 (* THEN *);
  261 (* ELSE *);
  262 (* FUN *);
  263 (* EQ *);
  266 (* TRUE *);
  267 (* FALSE *);
  268 (* REC *);
    0 (* EOF *);
  269 (* LPAREN *);
  270 (* RPAREN *);
  271 (* COMMA *);
  272 (* RIGHT_ARROW *);
    0|]

let yytransl_block = [|
  264 (* INT *);
  265 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\003\000\003\000\003\000\
\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\004\000\006\000\
\007\000\006\000\002\000\005\000\003\000\001\000\002\000\005\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\003\000\006\000\
\005\000\000\000\017\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\000\000\016\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\021\000\016\000"

let yysindex = "\012\000\
\119\255\000\000\003\255\119\255\250\254\000\000\000\000\000\000\
\000\000\119\255\000\000\044\000\000\000\250\254\005\255\251\254\
\071\255\004\255\042\255\000\000\119\255\015\255\000\000\246\254\
\119\255\119\255\119\255\000\000\119\255\119\255\000\000\250\254\
\084\255\095\255\134\255\057\255\108\255\009\255\119\255\119\255\
\000\000\119\255\000\000\128\255\119\255\128\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\006\000\029\000\021\000"

let yygindex = "\000\000\
\000\000\007\000\251\255"

let yytablesize = 313
let yytable = "\018\000\
\007\000\025\000\013\000\031\000\032\000\008\000\015\000\012\000\
\022\000\024\000\017\000\013\000\001\000\013\000\014\000\015\000\
\019\000\015\000\023\000\027\000\009\000\030\000\043\000\000\000\
\011\000\000\000\038\000\000\000\010\000\000\000\000\000\033\000\
\034\000\035\000\000\000\036\000\037\000\000\000\000\000\000\000\
\000\000\000\000\003\000\020\000\004\000\044\000\045\000\005\000\
\046\000\006\000\007\000\008\000\009\000\000\000\010\000\028\000\
\029\000\003\000\000\000\004\000\000\000\000\000\005\000\000\000\
\006\000\007\000\008\000\009\000\000\000\010\000\041\000\003\000\
\000\000\004\000\026\000\000\000\005\000\000\000\006\000\007\000\
\008\000\009\000\000\000\010\000\003\000\039\000\004\000\000\000\
\000\000\005\000\000\000\006\000\007\000\008\000\009\000\003\000\
\010\000\004\000\000\000\040\000\005\000\000\000\006\000\007\000\
\008\000\009\000\000\000\010\000\003\000\042\000\004\000\000\000\
\000\000\005\000\000\000\006\000\007\000\008\000\009\000\003\000\
\010\000\004\000\000\000\000\000\005\000\000\000\006\000\007\000\
\008\000\009\000\004\000\010\000\000\000\005\000\000\000\006\000\
\007\000\008\000\009\000\005\000\010\000\006\000\007\000\008\000\
\009\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\007\000\007\000\007\000\007\000\008\000\008\000\
\000\000\008\000\008\000\000\000\000\000\000\000\007\000\007\000\
\000\000\000\000\000\000\008\000\008\000\009\000\009\000\000\000\
\009\000\009\000\011\000\000\000\011\000\011\000\010\000\000\000\
\010\000\010\000\009\000\009\000\000\000\000\000\011\000\011\000\
\000\000\000\000\010\000\010\000\003\000\000\000\004\000\000\000\
\000\000\005\000\000\000\006\000\007\000\008\000\009\000\000\000\
\010\000"

let yycheck = "\005\000\
\000\000\007\001\009\001\014\001\015\001\000\000\013\001\001\000\
\014\000\015\000\004\000\009\001\001\000\009\001\012\001\013\001\
\010\000\013\001\014\001\016\001\000\000\007\001\014\001\255\255\
\000\000\255\255\032\000\255\255\000\000\255\255\255\255\025\000\
\026\000\027\000\255\255\029\000\030\000\255\255\255\255\255\255\
\255\255\255\255\001\001\000\000\003\001\039\000\040\000\006\001\
\042\000\008\001\009\001\010\001\011\001\255\255\013\001\014\001\
\015\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\008\001\009\001\010\001\011\001\255\255\013\001\014\001\001\001\
\255\255\003\001\004\001\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\255\255\013\001\001\001\002\001\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\011\001\001\001\
\013\001\003\001\255\255\005\001\006\001\255\255\008\001\009\001\
\010\001\011\001\255\255\013\001\001\001\002\001\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\011\001\001\001\
\013\001\003\001\255\255\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\003\001\013\001\255\255\006\001\255\255\008\001\
\009\001\010\001\011\001\006\001\013\001\008\001\009\001\010\001\
\011\001\255\255\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\001\001\002\001\
\255\255\004\001\005\001\255\255\255\255\255\255\014\001\015\001\
\255\255\255\255\255\255\014\001\015\001\001\001\002\001\255\255\
\004\001\005\001\002\001\255\255\004\001\005\001\002\001\255\255\
\004\001\005\001\014\001\015\001\255\255\255\255\014\001\015\001\
\255\255\255\255\014\001\015\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\008\001\009\001\010\001\011\001\255\255\
\013\001"

let yynames_const = "\
  LET\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  EQ\000\
  TRUE\000\
  FALSE\000\
  REC\000\
  EOF\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  RIGHT_ARROW\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 29 "miniml/parser.mly"
                   ( _1 )
# 204 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 33 "miniml/parser.mly"
                                                  ( _2 )
# 211 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 34 "miniml/parser.mly"
                                                  ( Ident(_1) )
# 218 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 35 "miniml/parser.mly"
                                                  ( Number(_1) )
# 225 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "miniml/parser.mly"
                                                  ( False )
# 231 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "miniml/parser.mly"
                                                  ( True )
# 237 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 38 "miniml/parser.mly"
                                                  ( Lambda(_2,_4) )
# 245 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 39 "miniml/parser.mly"
                                                  ( Let(_2,_4,_6) )
# 254 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Ast.pat) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 40 "miniml/parser.mly"
                                                  ( LetRec(_3,_5,_7) )
# 263 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 41 "miniml/parser.mly"
                                                  ( If(_2,_4,_6) )
# 272 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 42 "miniml/parser.mly"
                                                  ( Apply(_1,_2) )
# 280 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 43 "miniml/parser.mly"
                                                  ( Mlpair(_2,_4) )
# 288 "miniml/parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.pat) in
    Obj.repr(
# 47 "miniml/parser.mly"
                                                  ( _2 )
# 295 "miniml/parser.ml"
               : Ast.pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "miniml/parser.mly"
                                                  ( IdentPat(_1) )
# 302 "miniml/parser.ml"
               : Ast.pat))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "miniml/parser.mly"
                                                  ( NullPat )
# 308 "miniml/parser.ml"
               : Ast.pat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.pat) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.pat) in
    Obj.repr(
# 50 "miniml/parser.mly"
                                                  ( Pairpat(_2,_4) )
# 316 "miniml/parser.ml"
               : Ast.pat))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
